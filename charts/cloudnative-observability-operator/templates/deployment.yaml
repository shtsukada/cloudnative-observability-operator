apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "cno.fullname" . }}
  labels: {{- include "cno.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "cno.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "cno.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ default (include "cno.fullname" .) .Values.serviceAccount.name }}
      securityContext:
        runAsNonRoot: {{ .Values.security.podSecurityContext.runAsNonRoot }}
        {{- if .Values.security.podSecurityContext.enabledFixedIDs }}
        runAsUser: {{ .Values.security.podSecurityContext.runAsUser }}
        runAsGroup: {{ .Values.security.podSecurityContext.runAsGroup }}
        fsGroup: {{ .Values.security.podSecurityContext.fsGroup }}
        {{- end }}
        seccompProfile:
          type: {{ .Values.security.podSecurityContext.seccompProfile.type }}
      containers:
        - name: manager
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - "--leader-elect={{ .Values.leaderElection.enabled }}"
            - "--metrics-bind-address=:{{ .Values.networkPolicy.metricsPort }}"
            - "--health-probe-bind-address=:8081"
            - "--zap-encoder=json"
            - "--zap-log-level={{ (index (first .Values.operator.env) "value") | default "info" }}"
          envFrom:
            - configMapRef:
                name: {{ include "cno.fullname" . }}-config
          env:
            {{- toYaml .Values.operator.env | nindent 12 }}
            - name: ZAP_LOG_JSON
              value: "{{ ternary "true" "false" .Values.telemetry.logs.json }}"
            - name: ZAP_LOG_LEVEL
              value: "{{ .Values.telemetry.logs.level | default "info" }}"
            - name: ZAP_SAMPLE
              value: "{{ ternary "true" "false" .Values.telemetry.logs.sample }}"
            - name: OTEL_TRACES_ENABLED
              value: "{{ ternary "true" "false" .Values.telemetry.traces.enabled }}"
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: "{{ .Values.telemetry.traces.endpoint }}"
            - name: OTEL_EXPORTER_OTLP_PROTOCOL
              value: "grpc"
            - name: OTEL_TRACES_SAMPLER
              value: "{{ .Values.telemetry.traces.sampler }}"
            - name: OTEL_TRACES_SAMPLER_ARG
              value: "{{ .Values.telemetry.traces.samplerArg | toString }}"
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: "service.name={{ .Values.telemetry.traces.serviceName }},k8s.namespace=$(POD_NAMESPACE),k8s.pod.name=$(POD_NAME)"
            - name: OTEL_SERVICE_NAME
              value: "{{ .Values.telemetry.traces.serviceName }}"
            - name: POD_NAME
              valueFrom: { fieldRef: { fieldPath: metadata.name } }
            - name: POD_NAMESPACE
              valueFrom: { fieldRef: { fieldPath: metadata.namespace } }
          ports:
            - name: metrics
              containerPort: {{ .Values.networkPolicy.metricsPort }}
            - name: healthz
              containerPort: 8081
          readinessProbe:
            httpGet: { path: /readyz, port: 8081 }
            initialDelaySeconds: 5
          livenessProbe:
            httpGet: { path: /healthz, port: 8081 }
            initialDelaySeconds: 10
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          securityContext:
            readOnlyRootFilesystem: {{ .Values.security.containerSecurityContext.readOnlyRootFilesystem }}
            allowPrivilegeEscalation: {{ .Values.security.containerSecurityContext.allowPrivilegeEscalation }}
            capabilities:
              drop:
              {{- range .Values.security.containerSecurityContext.capabilities.drop }}
                - {{ . }}
              {{- end }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: tmp
          emptyDir: {}
